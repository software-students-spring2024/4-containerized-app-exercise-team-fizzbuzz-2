name: CI / CD webapp
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    services:
      mongodb:
        image: mongo:4.4.6
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGODB_USER }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGODB_PASSWORD }} 
          MONGO_INITDB_DATABASE: ${{ secrets.MONGODB_HOST }}
        ports:
          - 27017:27017
        options:
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
    
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install mongosh
        run: |
          sudo apt-get install gnupg
          wget -qO- https://www.mongodb.org/static/pgp/server-7.0.asc | sudo tee /etc/apt/trusted.gpg.d/server-7.0.asc
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh
          mongosh --version

      - name: Initalize MongoDB
        timeout-minutes: 5
        run: |
          mongosh
      
      - name: Install dependencies
        run: |
          cd web-app
          touch .env
          echo MONGODB_USER=user >> .env
          echo MONGODB_PASSWORD=test >> .env
          echo MONGODB_HOST=localhost >> .env
          echo MONGODB_NAME=user >> .env
          echo MONGODB_PORT=27017 >> .env
          echo MONGODB_AUTHSOURCE=da2863 >> .env
          echo WEBAPP_FLASK_PORT=${{ secrets.WEBAPP_FLASK_PORT }} >> .env
          echo WEBAPP_FLASK_APP=${{ secrets.WEBAPP_FLASK_APP }} >> .env
          echo WEBAPP_FLASK_ENV=${{ secrets.WEBAPP_FLASK_ENV }} >> .env
          echo WEBAPP_FLASK_SECRET_KEY=${{ secrets.WEBAPP_FLASK_SECRET_KEY }} >> .env
          echo ML_FLASK_PORT=${{ secrets.ML_FLASK_PORT }} >> .env
          echo ML_FLASK_APP=${{ secrets.ML_FLASK_APP }} >> .env
          echo ML_FLASK_ENV=${{ secrets.ML_FLASK_ENV }} >> .env
          echo ML_FLASK_SECRET_KEY=${{ secrets.ML_FLASK_SECRET_KEY }} >> .env

          cat .env
          
          python -m pip install --upgrade pip
          pip install --user pipenv
          pipenv --python ${{ matrix.python-version }}
          pipenv install pytest
          pipenv install
  push_to_registry:
    needs: [build]
    if: github.ref == 'refs/heads/main'
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: doodyshark/se-web-app

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: ./web-app
          file: ./web-app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}